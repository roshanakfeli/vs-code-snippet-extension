{
  "Sanaap React Query Hook": {
    "prefix": ["rqhs", "useQuerySanaap"],
    "body": [
      "import { APIs } from 'services/APIs';",
      "import { UseQueryOptions, useQuery } from '@tanstack/react-query';",
      "",
      "//types",
      "import { APIError, ReactQuerySideEffectTypes } from 'models/APImodels';",
      "import {",
      "  ${2:FeatureName}Params,   ",
      "  ${3:FeatureName}Response,",
      "} from 'services/models';",
      "",
      "type Params = ${2:FeatureName}Params;",
      "type Data = ${3:FeatureName}Response;",
      "type Options = Omit<",
      "  UseQueryOptions<Data, APIError, Data, any>,",
      "  'queryKey' | 'queryFn'",
      "> &",
      "  ReactQuerySideEffectTypes<Data>;",
      "",
      "export const ${4:QUERY_KEY_CONST} = '${4:QUERY_KEY_CONST}'; ",
      "",
      "export const use${1:HookIdentifier}API = ( ",
      "  params: Params,",
      "  options?: Options",
      ") => {",
      "  const { onError, onSuccess, onSettled, meta, ...restOptions } =",
      "    options as Options;",
      "  return useQuery<Data, APIError, Data, any>({",
      "    queryKey: [${4:QUERY_KEY_CONST}, params],",
      "    queryFn: async ({ signal }) =>",
      "      APIs.${5:apiCategory}.${6:apiFunctionName}(params, signal),",
      "    ...restOptions,",
      "    meta: {",
      "      onError,",
      "      onSuccess,",
      "      onSettled,",
      "      ...meta,",
      "    },",
      "  });",
      "};",
      ""
    ],
    "description": "Creates a standard React Query hook for Sanaap co."
  },
  "Sanaap React Mutation Hook": {
    "prefix": ["rqms", "useMutationSanaap"],
    "body": [
      "import { APIs } from 'services/APIs';",
      "import { UseMutationOptions, useMutation } from '@tanstack/react-query';",
      "",
      "//types",
      "import { APIError } from 'models/APImodels';",
      "import {",
      "  ${2:FeatureName}Params,",
      "  ${3:FeatureName}Response,",
      "} from 'services/models';",
      "",
      "type Params = ${2:FeatureName}Params;",
      "type Data = ${3:FeatureName}Response;",
      "type Options = Omit<UseMutationOptions<Data, APIError, Params>, 'mutationFn'>;",
      "",
      "export const use${1:HookIdentifier}API = (options?: Options) => {",
      "  return useMutation<Data, APIError, Params>({",
      "    mutationFn: async (params: Params) =>",
      "      APIs.${4:apiCategory}.${5:apiFunctionName}(params),",
      "    ...options,",
      "  });",
      "};",
      ""
    ],
    "description": "Creates a standard React Mutation hook for Sanaap co."
  }
}
